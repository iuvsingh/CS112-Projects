class Device:
    #constructor
    def __init__(self, name, watts=100,on=False):
        self.name=name
        self.watts=watts
        self.on=on

    #returns the str in the specified format
    def __str__(self):
        #if device is on, using 0 for the watts, otherwise the actual watts
        if self.on:
            return '(+{}W: {})'.format(self.watts,self.name)
        else:
            return '(+{}W: {})'.format(0, self.name)

    #returns a string, which if we compiled, get a copy of this Device
    def __repr__(self):
        return "Device('{}', {}, {})".format(self.name,self.watts,self.on)

    #returns True if this object and other object have same values for all fields
    def __eq__(self, other):
        return self.name==other.name and self.watts==other.watts and self.on==other.on

    #turns on the device
    def turn_on(self):
        self.on=True

    # turns off the device
    def turn_off(self):
        self.on=False

    # turns on the device if it is off, and vice versa
    def toggle(self):
        if self.on:
            self.on=False
        else:
            self.on=True


#Outlet class

class Outlet:
    #constructor
    def __init__(self, devices=None):
        self.devices=[]
        #if devices is not None, assigning a copy of it to self.devices
        if devices!=None:
            self.devices=devices.copy()

    def __str__(self):
        result="Outlet(["
        #appending str() values of all devices to result
        for i in range(len(self.devices)):
            result+=str(self.devices[i])
            #appending a comma and space if this is not the last element
            if i!=len(self.devices)-1:
                result+=", "
        result+="])"
        return result

    #returns a string containing the repr() form of all devices
    def __repr__(self):
        return "Outlet({})".format(repr(self.devices))

    #returns True if two outlets have same devices in same positions
    def __eq__(self, other):
        return self.devices==other.devices

    #returns the maximum watts if all devices are on
    def max_watts(self):
        max_w=0
        for device in self.devices:
            #adding device.watts to max_w
            max_w+=device.watts
        return max_w

    # returns the current watts
    def watts_now(self):
        watts = 0
        for device in self.devices:
            #adding device.watts to watts if device is on
            if device.on:
                watts += device.watts
        return watts

    #adds a device to the outlet
    def add_device(self, device):
        self.devices.append(device)

    #removes a device from outlet
    def remove_device(self, name):
        for device in self.devices:
            if device.name==name:
                return self.devices.remove(device)
        return None

    #turns of all devices
    def turn_off_all(self):
        for device in self.devices:
            device.turn_off()


#Circuit class

class Circuit:
    #constructor
    def __init__(self, outlets=None):
        if outlets==None:
            #empty outlets list
            self.outlets=[]
        else:
            #taking and assigning a copy of parameter outlets
            self.outlets=outlets.copy()

    def __str__(self):
        result = "Circuit(["
        # appending str() values of each outlet to result
        for i in range(len(self.outlets)):
            result += str(self.outlets[i])
            if i != len(self.outlets) - 1:
                result += ", "
        result += "])"
        return result

    def __repr__(self):
        return "Circuit({})".format(repr(self.outlets))

    #returns True if two Circuits have same devices in same positions
    def __eq__(self, other):
        return self.outlets==other.outlets

    #returns the max watts of all outlets in circuit
    def max_watts(self):
        watts=0
        #adding max_watts() of all outlets to watts and returns it
        for outlet in self.outlets:
            watts+=outlet.max_watts()
        return watts

    #returns the current watts running through the circuit
    def watts_now(self):
        watts = 0
        for outlet in self.outlets:
            watts += outlet.watts_now()
        return watts

    #turns off all devices in all outlets in this circuit
    def turn_off_all(self):
        for outlet in self.outlets:
            outlet.turn_off_all()